module Beeper(
    input clk_in,
    input rst_n_in,
    input [15:0] key_in,
    output beeper
);

wire [31:0] cycle;
tone u_tone (
    .key_in(key_in),
    .cycle(cycle)
);

PWM #(.WIDTH(32)) u_PWM (
    .clk(clk_in),
    .rst_n(rst_n_in),
    .cycle(cycle),
    .duty(cycle >> 1),  // 50%占空比
    .pwm_out(beeper)
);

endmodule

// Tone译码模块
module tone(
    input [15:0] key_in,
    output reg [31:0] cycle
);

always @(*) begin
    case (key_in)
        16'h0001: cycle = 32'd45872;  // 低音1 (261.6Hz)
        16'h0002: cycle = 32'd40858;  // 低音2 (293.7Hz)
        16'h0004: cycle = 32'd36408;  // 低音3 (329.6Hz)
        16'h0008: cycle = 32'd34364;  // 低音4 (349.2Hz)
        16'h0010: cycle = 32'd30612;  // 低音5 (392Hz)
        16'h0020: cycle = 32'd27273;  // 低音6 (440Hz)
        16'h0040: cycle = 32'd24296;  // 低音7 (493.9Hz)
        16'h0080: cycle = 32'd22931;  // 中音1 (523.3Hz)
        16'h0100: cycle = 32'd20432;  // 中音2 (587.3Hz)
        16'h0200: cycle = 32'd18201;  // 中音3 (659.3Hz)
        16'h0400: cycle = 32'd17180;  // 中音4 (698.5Hz)
        16'h0800: cycle = 32'd15306;  // 中音5 (784Hz)
        16'h1000: cycle = 32'd13636;  // 中音6 (880Hz)
        16'h2000: cycle = 32'd12148;  // 中音7 (987.8Hz)
        16'h4000: cycle = 32'd11478;  // 高音1 (1045.5Hz)
        16'h8000: cycle = 32'd10215;  // 高音2 (1174.7Hz)
        default: cycle = 32'd0;      // 静音
    endcase
end

endmodule

// PWM生成模块
module PWM #(
    parameter WIDTH = 32
)(
    input clk,
    input rst_n,
    input [WIDTH-1:0] cycle,
    input [WIDTH-1:0] duty,
    output reg pwm_out
);

reg [WIDTH-1:0] cnt;
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        cnt <= 0;
        pwm_out <= 0;
    end else begin
        if (cycle == 0) begin
            pwm_out <= 0;  // 静音
        end else begin
            cnt <= cnt + 1;
            if (cnt < duty) pwm_out <= 1;
            else pwm_out <= 0;
            if (cnt >= cycle) cnt <= 0;
        end
    end
end

endmodule