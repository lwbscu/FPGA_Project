module two_mul_two (a1, a0, b1, b0, c3, c2, c1, c0);
    input  a1, a0, b1, b0;      // 输入信号
    output c3, c2, c1, c0;      // 输出信号
    
    wire a1b0, a0b1, a1b1, a0b0;
    wire a1b0_and_a0b1;
    
    and (a1b0, a1, b0);
    and (a0b1, a0, b1);
    and (a1b1, a1, b1);
    and (a0b0, a0, b0);
    
    // C0 = A0·B0
    assign c0 = a0b0;
    
    // C1 = (A1·B0) ⊕ (A0·B1)
    xor (c1, a1b0, a0b1);
    
    // C2 = (A1·B1) ⊕ ((A1·B0)·(A0·B1))
    and (a1b0_and_a0b1, a1b0, a0b1);
    xor (c2, a1b1, a1b0_and_a0b1);
    
    // C3 = (A1·B1)·((A1·B0) + (A0·B1))
    wire a1b0_or_a0b1;
    or (a1b0_or_a0b1, a1b0, a0b1);
    and (c3, a1b1, a1b0_or_a0b1);
endmodule