module spectrum_display(
    input           clk,
    input           rst_n,
    input [7:0]     spectrum_data [0:7],  // 8段频谱数据
    input           spectrum_valid,       // 频谱数据有效
    
    output reg [7:0] led_out             // LED输出（低电平有效）
);

// 峰值保持
reg [7:0] peak_hold [0:7];
reg [15:0] decay_cnt;

// 更新峰值
integer i;
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        for (i = 0; i < 8; i = i + 1) begin
            peak_hold[i] <= 8'd0;
        end
        decay_cnt <= 16'd0;
    end else begin
        // 峰值衰减
        decay_cnt <= decay_cnt + 1'b1;
        if (decay_cnt >= 16'd60000) begin  // 约5ms衰减一次
            decay_cnt <= 16'd0;
            for (i = 0; i < 8; i = i + 1) begin
                if (peak_hold[i] > 8'd0)
                    peak_hold[i] <= peak_hold[i] - 1'b1;
            end
        end
        
        // 更新峰值
        if (spectrum_valid) begin
            for (i = 0; i < 8; i = i + 1) begin
                if (spectrum_data[i] > peak_hold[i])
                    peak_hold[i] <= spectrum_data[i];
            end
        end
    end
end

// LED显示映射 - 每个LED显示一个频段
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        led_out <= 8'hFF;  // 全灭
    end else begin
        // 根据每个频段的强度点亮对应LED
        led_out[0] <= (peak_hold[0] > 8'd30) ? 1'b0 : 1'b1;
        led_out[1] <= (peak_hold[1] > 8'd30) ? 1'b0 : 1'b1;
        led_out[2] <= (peak_hold[2] > 8'd30) ? 1'b0 : 1'b1;
        led_out[3] <= (peak_hold[3] > 8'd30) ? 1'b0 : 1'b1;
        led_out[4] <= (peak_hold[4] > 8'd30) ? 1'b0 : 1'b1;
        led_out[5] <= (peak_hold[5] > 8'd30) ? 1'b0 : 1'b1;
        led_out[6] <= (peak_hold[6] > 8'd30) ? 1'b0 : 1'b1;
        led_out[7] <= (peak_hold[7] > 8'd30) ? 1'b0 : 1'b1;
    end
end

endmodule