module simple_fft(
    input           clk,
    input           rst_n,
    input  [7:0]    adc_data,
    input           trigger,
    input  [2:0]    mode,
    input  [7:0]    gain,
    output reg [95:0] spectrum_data_packed,  // 8个频段 x 12位
    output reg      spectrum_valid
);

// 采样缓冲
reg [7:0] samples [0:63];
reg [5:0] sample_cnt;
reg sampling;

// 频谱计算寄存器
reg [11:0] spectrum [0:7];
reg [3:0] calc_cnt;
integer i, j;

// 采样状态机
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        sample_cnt <= 6'd0;
        sampling <= 1'b0;
        spectrum_valid <= 1'b0;
        
        for (i = 0; i < 64; i = i + 1) begin
            samples[i] <= 8'd0;
        end
    end else begin
        if (trigger && !sampling) begin
            sampling <= 1'b1;
            sample_cnt <= 6'd0;
            spectrum_valid <= 1'b0;
        end else if (sampling) begin
            samples[sample_cnt] <= adc_data;
            
            if (sample_cnt == 6'd63) begin
                sampling <= 1'b0;
                sample_cnt <= 6'd0;
            end else begin
                sample_cnt <= sample_cnt + 1'b1;
            end
        end
    end
end

// 简化的频谱计算（能量统计）
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        calc_cnt <= 4'd0;
        for (i = 0; i < 8; i = i + 1) begin
            spectrum[i] <= 12'd0;
        end
        spectrum_data_packed <= 96'd0;
    end else if (!sampling && calc_cnt < 4'd8) begin
        // 计算8个频段的能量
        case(calc_cnt)
            4'd0: begin
                // 频段0：0-7号样本
                spectrum[0] <= 12'd0;
                for (j = 0; j < 8; j = j + 1) begin
                    spectrum[0] <= spectrum[0] + 
                        ((samples[j] > 8'd128) ? 
                         (samples[j] - 8'd128) : 
                         (8'd128 - samples[j]));
                end
            end
            4'd1: begin
                // 频段1：8-15号样本
                spectrum[1] <= 12'd0;
                for (j = 8; j < 16; j = j + 1) begin
                    spectrum[1] <= spectrum[1] + 
                        ((samples[j] > 8'd128) ? 
                         (samples[j] - 8'd128) : 
                         (8'd128 - samples[j]));
                end
            end
            // ... 类似处理其他频段
            4'd7: begin
                // 频段7：56-63号样本
                spectrum[7] <= 12'd0;
                for (j = 56; j < 64; j = j + 1) begin
                    spectrum[7] <= spectrum[7] + 
                        ((samples[j] > 8'd128) ? 
                         (samples[j] - 8'd128) : 
                         (8'd128 - samples[j]));
                end
            end
        endcase
        
        calc_cnt <= calc_cnt + 1'b1;
        
        if (calc_cnt == 4'd7) begin
            // 应用增益并打包输出
            spectrum_data_packed <= {
                (spectrum[7] * gain) >> 7,
                (spectrum[6] * gain) >> 7,
                (spectrum[5] * gain) >> 7,
                (spectrum[4] * gain) >> 7,
                (spectrum[3] * gain) >> 7,
                (spectrum[2] * gain) >> 7,
                (spectrum[1] * gain) >> 7,
                (spectrum[0] * gain) >> 7
            };
            spectrum_valid <= 1'b1;
            calc_cnt <= 4'd0;
        end
    end else begin
        spectrum_valid <= 1'b0;
    end
end

endmodule