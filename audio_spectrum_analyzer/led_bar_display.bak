module led_bar_display(
    input           clk,
    input           rst_n,
    input [95:0]    spectrum_data_packed,
    input [2:0]     mode,
    output reg [7:0] led
);

// 解包数据
wire [11:0] spectrum [0:7];
assign spectrum[0] = spectrum_data_packed[11:0];
assign spectrum[1] = spectrum_data_packed[23:12];
assign spectrum[2] = spectrum_data_packed[35:24];
assign spectrum[3] = spectrum_data_packed[47:36];
assign spectrum[4] = spectrum_data_packed[59:48];
assign spectrum[5] = spectrum_data_packed[71:60];
assign spectrum[6] = spectrum_data_packed[83:72];
assign spectrum[7] = spectrum_data_packed[95:84];

// 峰值保持
reg [11:0] peak_hold [0:7];
reg [15:0] peak_timer [0:7];
integer i;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        led <= 8'h00;
        for (i = 0; i < 8; i = i + 1) begin
            peak_hold[i] <= 12'd0;
            peak_timer[i] <= 16'd0;
        end
    end else begin
        case (mode)
            3'd0: begin  // 实时频谱
                led[0] <= |spectrum[0][11:4];
                led[1] <= |spectrum[1][11:4];
                led[2] <= |spectrum[2][11:4];
                led[3] <= |spectrum[3][11:4];
                led[4] <= |spectrum[4][11:4];
                led[5] <= |spectrum[5][11:4];
                led[6] <= |spectrum[6][11:4];
                led[7] <= |spectrum[7][11:4];
            end
            
            3'd1: begin  // VU表模式
                reg [14:0] avg;
                avg = (spectrum[0] + spectrum[1] + spectrum[2] + spectrum[3] +
                       spectrum[4] + spectrum[5] + spectrum[6] + spectrum[7]) >> 3;
                
                if (avg > 12'd3584) led <= 8'b11111111;
                else if (avg > 12'd3072) led <= 8'b01111111;
                else if (avg > 12'd2560) led <= 8'b00111111;
                else if (avg > 12'd2048) led <= 8'b00011111;
                else if (avg > 12'd1536) led <= 8'b00001111;
                else if (avg > 12'd1024) led <= 8'b00000111;
                else if (avg > 12'd512) led <= 8'b00000011;
                else if (avg > 12'd256) led <= 8'b00000001;
                else led <= 8'b00000000;
            end
            
            3'd2: begin  // 峰值保持
                for (i = 0; i < 8; i = i + 1) begin
                    if (spectrum[i] > peak_hold[i]) begin
                        peak_hold[i] <= spectrum[i];
                        peak_timer[i] <= 16'd50000;
                    end else if (peak_timer[i] > 0) begin
                        peak_timer[i] <= peak_timer[i] - 1'b1;
                    end else begin
                        if (peak_hold[i] > 12'd10)
                            peak_hold[i] <= peak_hold[i] - 12'd10;
                        else
                            peak_hold[i] <= 12'd0;
                    end
                end
                
                led[0] <= |peak_hold[0][11:4];
                led[1] <= |peak_hold[1][11:4];
                led[2] <= |peak_hold[2][11:4];
                led[3] <= |peak_hold[3][11:4];
                led[4] <= |peak_hold[4][11:4];
                led[5] <= |peak_hold[5][11:4];
                led[6] <= |peak_hold[6][11:4];
                led[7] <= |peak_hold[7][11:4];
            end
            
            default: led <= 8'h00;
        endcase
    end
end

endmodule